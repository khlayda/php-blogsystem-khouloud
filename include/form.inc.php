<?php
#**************************************************************************************#

#**************************************************************************************#

          // Optionales Feld f√ºr E-Mail

define('INPUT_STRING_MAX_LENGTH', 256);     // Maximale Eingabel√§nge f√ºr Strings
define('INPUT_STRING_MIN_LENGTH', 0);       // Minimale Eingabel√§nge f√ºr Strings

				#*************************************#
				#********** SANITIZE STRING **********#
				#*************************************#
				
				/**
				*
				*	Ersetzt potentiell gef√§hrliche Steuerzeichen durch HTML-Entities
				*	Entfernt vor und nach einem String Whitespaces
				*	Ersetzt Leerstrings durch NULL
				*
				*	@params		String	$value	Die zu bereinigende Zeichenkette
				*
				*	@return		String				Die bereinigte Zeichenkette
				*
				*/
				function sanitizeString($value) {
					#********** LOCAL SCOPE START **********#
if(DEBUG_F)		echo "<p class='debug sanitizeString'>üåÄ<b>Line " . __LINE__ . "</b>: Aufruf " . __FUNCTION__ . "( '$value' ) <i>(" . basename(__FILE__) . ")</i></p>\n";
					
					/*
						SCHUTZ GEGEN EINSCHLEUSUNG UNERW√úNSCHTEN CODES (XSS-Attacken):
						Damit so etwas nicht passiert: <script>alert("HACK!")</script>
						muss der empfangene String ZWINGEND entsch√§rft werden!
						htmlspecialchars() wandelt potentiell gef√§hrliche Steuerzeichen wie
						< > " & in HTML-Code um (&lt; &gt; &quot; &amp;).
						
						Der Parameter ENT_QUOTES wandelt zus√§tzlich einfache ' in &apos; um.
						Der Parameter ENT_HTML5 sorgt daf√ºr, dass der generierte HTML-Code HTML5-konform ist.
						
						Der 1. optionale Parameter regelt die zugrundeliegende Zeichencodierung 
						(NULL=Zeichencodierung wird vom Webserver √ºbernommen)
						
						Der 2. optionale Parameter bestimmt die Zeichenkodierung
						
						Der 3. optionale Parameter regelt, ob bereits vorhandene HTML-Entities erneut entsch√§rft werden
						(false=keine doppelte Entsch√§rfung)
					*/
					$value = htmlspecialchars($value, ENT_QUOTES | ENT_HTML5, 'UTF-8', false);
					
					
					/*
						trim() entfernt VOR und NACH einem String (aber nicht mitten drin) 
						s√§mtliche sog. Whitespaces (Leerzeichen, Tabs, Zeilenumbr√ºche)
					*/
					$value = trim($value);
					
					
					/*
						Leerstrings aus dem Formular in NULL umwandeln, damit in der DB vorhandene
						NULL-Werte nicht mit Leerstrings √ºberschrieben werden.
					*/
					if($value === '') $value = NULL;
					
					
					// Entsch√§rften und getrimmten Wert zur√ºckgeben
					return $value;
					#********** LOCAL SCOPE END **********#
				}


#**************************************************************************************#

				
				#*******************************************#
				#********** VALIDATE INPUT STRING **********#
				#*******************************************#
				
				/**
				*
				*	Pr√ºft einen √ºbergebenen String auf Maximall√§nge sowie optional 
				* 	auf Mindestl√§nge und Pflichtangabe.
				*	Generiert Fehlermeldung bei Leerstring und gleichzeitiger Pflichtangabe 
				*	oder bei ung√ºltiger L√§nge.
				*
				*	@param	String		$value											Der zu validierende String
				*	@param	Boolean		$mandatory=INPUT_STRING_MANDATORY		Angabe zu Pflichteingabe
				*	@param	Integer		$maxLength=INPUT_STRING_MAX_LENGTH		Die zu pr√ºfende Maximall√§nge
				*	@param	Integer		$minLength=INPUT_STRING_MIN_LENGTH		Die zu pr√ºfende Mindestl√§nge															
				*
				*	@return	String|NULL														Fehlermeldung | ansonsten NULL
				*
				*/
				function validateInputString(	$value, 
														$mandatory=INPUT_STRING_MANDATORY, 
														$maxLength=INPUT_STRING_MAX_LENGTH, 
														$minLength=INPUT_STRING_MIN_LENGTH )
				{
					#********** LOCAL SCOPE START **********#
if(DEBUG_F)		echo "<p class='debug validateInputString'>üåÄ<b>Line " . __LINE__ . "</b>: Aufruf " . __FUNCTION__ . "( '$value' [$minLength|$maxLength] mandatory:$mandatory ) <i>(" . basename(__FILE__) . ")</i></p>\n";
					
					
					#********** MANDATORY CHECK **********#
					if( $mandatory === true AND $value === NULL ) {
						// Fehlerfall
						return 'Dies ist ein Pflichtfeld!';
					}
					

					#********** MAXIMUM LENGTH CHECK **********#
					/*
						Da die Felder in der Datenbank oftmals eine L√§ngenbegrenzung besitzen,
						die Datenbank aber bei √úberschreiten dieser Grenze keine Fehlermeldung
						ausgibt, sondern alles, das √ºber diese Grenze hinausgeht, stillschweigend 
						abschneidet, muss vorher eine Pr√ºfung auf diese Maximall√§nge durchgef√ºhrt 
						werden. Nur so kann dem User auch eine entsprechende Fehlermeldung ausgegeben
						werden.
					*/
					/*
						mb_strlen() erwartet als Datentyp einen String. Wenn (sp√§ter bei der OOP)
						jedoch ein anderer Datentyp wie Integer oder Float √ºbergeben wird, wirft
						mb_strlen() einen Fehler. Da es ohnehin keinen Sinn macht, einen Zahlenwert
						auf seine L√§nge (Anzahl der Zeichen) zu pr√ºfen, wird diese Pr√ºfung nur f√ºr
						den Datentyp 'String' durchgef√ºhrt.
					*/
					/*
						Da die √úbergabe von NULL an PHP-eigene Funktionen in k√ºnftigen PHP-Versionen 
						nicht mehr erlaubt ist, muss vor jedem Aufruf einer PHP-Funktion sichergestellt 
						werden, dass der zu √ºbergebende Wert nicht NULL ist.
					*/
					if( $value !== NULL AND mb_strlen($value) > $maxLength ) {
						// Fehlerfall
						return "Darf maximal $maxLength Zeichen lang sein!";
					}
										
					
					#********** MINIMUM LENGTH CHECK **********#
					/*
						Es gibt Sonderf√§lle, bei denen eine Mindestl√§nge f√ºr einen Userinput
						vorgegeben ist, beispielsweise bei der Erstellung von Passw√∂rtern.
						Damit nicht-Pflichtfelder aber auch weiterhin leer sein d√ºrfen, muss
						die Mindestl√§nge als Standardwert mit 0 vorbelegt sein.
						
						Bei einem optionalen Feldwert, der gleichzeitig eine Mindestl√§nge
						einhalten muss, darf die Pr√ºfung keine Leersrtings validieren, da 
						diese nie die Mindestl√§nge erf√ºllen und somit der Wert nicht mehr 
						optional w√§re.
					*/
					/*
						Da die √úbergabe von NULL an PHP-eigene Funktionen in k√ºnftigen PHP-Versionen 
						nicht mehr erlaubt ist, muss vor jedem Aufruf einer PHP-Funktion sichergestellt 
						werden, dass der zu √ºbergebende Wert nicht NULL ist.
					*/
					if( $value !== NULL AND mb_strlen($value) < $minLength  ) {
						// Fehlerfall
						return "Muss mindestens $minLength Zeichen lang sein!";
					}				
					
					
					#********** NO ERROR **********#
					return NULL;
					
					#********** LOCAL SCOPE END **********#
				}


#**************************************************************************************#

				
				#********************************************#
				#********** VALIDATE EMAIL ADDRESS **********#
				#********************************************#
				
				/**
				*
				*	Pr√ºft einen √ºbergebenen String auf eine valide Email-Adresse und auf Leerstring.
				*	Generiert Fehlermeldung bei ung√ºltiger Email-Adresse oder Leerstring
				*
				*	@param	String	$value							Der zu √ºbergebende String
				*
				*	@return	String|NULL									Fehlermeldung | ansonsten NULL
				*
				*/
				function validateEmail(	$value, $mandatory=INPUT_STRING_MANDATORY ) {
					#********** LOCAL SCOPE START **********#
if(DEBUG_F)		echo "<p class='debug validateEmail'>üåÄ<b>Line " . __LINE__ . "</b>: Aufruf " . __FUNCTION__ . "( '$value' | mandatory:$mandatory ) <i>(" . basename(__FILE__) . ")</i></p>\n";
					
					
					#********** MANDATORY CHECK **********#
					if( $mandatory === true AND $value === NULL ) {
						// Fehlerfall
						return 'Dies ist ein Pflichtfeld!';
					}
					

					#********** VALIDATE EMAIL ADDRESS FORMAT **********#
					if( filter_var( $value, FILTER_VALIDATE_EMAIL) === false ) {
						// Fehlerfall
						return 'Dies ist keine g√ºltige Email-Adresse!';
					}					
					
					
					#********** NO ERROR **********#
					return NULL;
					
					#********** LOCAL SCOPE END **********#
				}


#**************************************************************************************#
?>
